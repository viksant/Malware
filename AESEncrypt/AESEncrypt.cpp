#include <aes.h>
#include <modes.h>
#include <filters.h>
#include <hex.h>
#include <iostream>
#include <vector>

#pragma comment(lib, "cryptopp")

std::vector<CryptoPP::byte> EncryptAES256(const std::vector<CryptoPP::byte>& plaintext, const CryptoPP::byte key[CryptoPP::AES::MAX_KEYLENGTH], const CryptoPP::byte iv[CryptoPP::AES::BLOCKSIZE]) {
    using namespace CryptoPP;
    std::vector<byte> ciphertext;

    try {
        CBC_Mode< AES >::Encryption encryptor;
        encryptor.SetKeyWithIV(key, AES::MAX_KEYLENGTH, iv);

        ArraySource(plaintext.data(), plaintext.size(), true,
            new StreamTransformationFilter(encryptor,
                new VectorSink(ciphertext)
            ) // StreamTransformationFilter
        ); // ArraySource
    }
    catch (const CryptoPP::Exception& e) {
        std::cerr << "Encryption Error: " << e.what() << std::endl;
    }

    return ciphertext;
}

std::vector<CryptoPP::byte> DecryptAES256(const std::vector<CryptoPP::byte>& ciphertext, const CryptoPP::byte key[CryptoPP::AES::MAX_KEYLENGTH], const CryptoPP::byte iv[CryptoPP::AES::BLOCKSIZE]) {
    using namespace CryptoPP;
    std::vector<byte> decryptedData;

    try {
        CBC_Mode< AES >::Decryption decryptor;
        decryptor.SetKeyWithIV(key, AES::MAX_KEYLENGTH, iv);

        ArraySource(ciphertext.data(), ciphertext.size(), true,
            new StreamTransformationFilter(decryptor,
                new VectorSink(decryptedData)
            ) // StreamTransformationFilter
        ); // ArraySource
    }
    catch (const CryptoPP::Exception& e) {
        std::cerr << "Decryption Error: " << e.what() << std::endl;
    }

    return decryptedData;
}

int main() {
    using namespace CryptoPP;
    byte key[AES::MAX_KEYLENGTH];
    byte iv[AES::BLOCKSIZE];
    memset(key, 0x01, AES::MAX_KEYLENGTH);
    memset(iv, 0x01, AES::BLOCKSIZE);

    // Example plaintext
    std::vector<byte> plaintext = { 'H', 'e', 'l', 'l', 'o', ' ', 'W', 'o', 'r', 'l', 'd', '!' };

    // Encrypt
    auto ciphertext = EncryptAES256(plaintext, key, iv);

    // Decrypt
    auto decryptedText = DecryptAES256(ciphertext, key, iv);

    // Print encrypted data in hex
    std::string encoded;
    ArraySource(&ciphertext[0], ciphertext.size(), true,
        new HexEncoder(
            new StringSink(encoded)
        ) // HexEncoder
    ); // ArraySource
    std::cout << "Encrypted: " << encoded << std::endl;

    // Print decrypted text as a string
    std::string decryptedString(decryptedText.begin(), decryptedText.end());
    std::cout << "Decrypted: " << decryptedString << std::endl;

    return 0;
}
